// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module triangular_solve_tra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_address0,
        b_ce0,
        b_we0,
        b_d0,
        b_q0,
        G_0,
        G_1,
        G_2,
        G_3,
        G_4,
        G_5,
        G_6,
        G_7,
        G_8
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] b_address0;
output   b_ce0;
output   b_we0;
output  [31:0] b_d0;
input  [31:0] b_q0;
input  [31:0] G_0;
input  [31:0] G_1;
input  [31:0] G_2;
input  [31:0] G_3;
input  [31:0] G_4;
input  [31:0] G_5;
input  [31:0] G_6;
input  [31:0] G_7;
input  [31:0] G_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] b_address0;
reg b_ce0;
reg b_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_137;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state13;
wire   [1:0] k_fu_153_p2;
reg   [1:0] k_reg_255;
wire    ap_CS_fsm_state2;
wire   [3:0] sub_ln18_fu_167_p2;
reg   [3:0] sub_ln18_reg_260;
wire   [0:0] icmp_ln50_fu_147_p2;
wire   [1:0] i_fu_179_p2;
reg   [1:0] i_reg_268;
wire    ap_CS_fsm_state3;
wire   [3:0] add_ln18_fu_194_p2;
reg   [3:0] add_ln18_reg_273;
wire   [0:0] icmp_ln16_fu_173_p2;
reg   [1:0] b_addr_reg_283;
wire   [31:0] tmp_fu_228_p11;
wire   [31:0] grp_fu_114_p2;
reg   [31:0] tmp_i_reg_293;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_108_p2;
wire    ap_CS_fsm_state12;
reg   [31:0] tmp_1_reg_303;
wire    ap_CS_fsm_state18;
reg   [1:0] n_assign_reg_61;
wire    ap_CS_fsm_state34;
reg   [31:0] result_0_i_reg_73;
reg   [1:0] i_0_i_reg_85;
reg   [31:0] phi_ln53_reg_96;
wire   [63:0] zext_ln18_fu_185_p1;
wire   [63:0] zext_ln52_fu_199_p1;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] grp_fu_108_p0;
reg   [31:0] grp_fu_108_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
wire   [3:0] shl_ln_fu_159_p3;
wire   [3:0] zext_ln18_1_fu_143_p1;
wire   [3:0] zext_ln18_2_fu_190_p1;
reg   [1:0] grp_fu_108_opcode;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

DLU_faddfsub_32nsbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_faddfsub_32nsbkb_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .din1(grp_fu_108_p1),
    .opcode(grp_fu_108_opcode),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

DLU_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fmul_32ns_32ncud_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_fu_228_p11),
    .din1(b_q0),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

DLU_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fdiv_32ns_32ndEe_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_303),
    .din1(phi_ln53_reg_96),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

DLU_mux_94_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
DLU_mux_94_32_1_1_U28(
    .din0(G_0),
    .din1(G_1),
    .din2(G_2),
    .din3(G_3),
    .din4(G_4),
    .din5(G_5),
    .din6(G_6),
    .din7(G_7),
    .din8(G_8),
    .din9(add_ln18_reg_273),
    .dout(tmp_fu_228_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_0_i_reg_85 <= i_reg_268;
    end else if (((icmp_ln50_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_85 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_assign_reg_61 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        n_assign_reg_61 <= k_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        if ((~(n_assign_reg_61 == 2'd0) & ~(n_assign_reg_61 == 2'd1))) begin
            phi_ln53_reg_96 <= G_8;
        end else if ((n_assign_reg_61 == 2'd1)) begin
            phi_ln53_reg_96 <= G_4;
        end else if ((n_assign_reg_61 == 2'd0)) begin
            phi_ln53_reg_96 <= G_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        result_0_i_reg_73 <= grp_fu_108_p2;
    end else if (((icmp_ln50_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        result_0_i_reg_73 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln18_reg_273 <= add_ln18_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_173_p2 == 1'd1))) begin
        b_addr_reg_283 <= zext_ln52_fu_199_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_268 <= i_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_255 <= k_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_137 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln18_reg_260 <= sub_ln18_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_1_reg_303 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_i_reg_293 <= grp_fu_114_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln50_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        b_address0 = b_addr_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_173_p2 == 1'd1))) begin
        b_address0 = zext_ln52_fu_199_p1;
    end else if (((icmp_ln16_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        b_address0 = zext_ln18_fu_185_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_173_p2 == 1'd1)) | ((icmp_ln16_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_108_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_108_opcode = 2'd0;
    end else begin
        grp_fu_108_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_108_p0 = reg_137;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_108_p0 = result_0_i_reg_73;
    end else begin
        grp_fu_108_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_108_p1 = result_0_i_reg_73;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_108_p1 = tmp_i_reg_293;
    end else begin
        grp_fu_108_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln50_fu_147_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_173_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_194_p2 = (zext_ln18_2_fu_190_p1 + sub_ln18_reg_260);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign b_d0 = grp_fu_119_p2;

assign i_fu_179_p2 = (i_0_i_reg_85 + 2'd1);

assign icmp_ln16_fu_173_p2 = ((i_0_i_reg_85 == n_assign_reg_61) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_147_p2 = ((n_assign_reg_61 == 2'd3) ? 1'b1 : 1'b0);

assign k_fu_153_p2 = (n_assign_reg_61 + 2'd1);

assign shl_ln_fu_159_p3 = {{n_assign_reg_61}, {2'd0}};

assign sub_ln18_fu_167_p2 = (shl_ln_fu_159_p3 - zext_ln18_1_fu_143_p1);

assign zext_ln18_1_fu_143_p1 = n_assign_reg_61;

assign zext_ln18_2_fu_190_p1 = i_0_i_reg_85;

assign zext_ln18_fu_185_p1 = i_0_i_reg_85;

assign zext_ln52_fu_199_p1 = n_assign_reg_61;

endmodule //triangular_solve_tra
