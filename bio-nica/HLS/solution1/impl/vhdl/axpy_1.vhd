-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axpy_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (1 downto 0);
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    y_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    G_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_0_o_ap_vld : OUT STD_LOGIC;
    G_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_1_o_ap_vld : OUT STD_LOGIC;
    G_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_2_o_ap_vld : OUT STD_LOGIC;
    G_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_3_o_ap_vld : OUT STD_LOGIC;
    G_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_4_o_ap_vld : OUT STD_LOGIC;
    G_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_5_o_ap_vld : OUT STD_LOGIC;
    G_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_6_o_ap_vld : OUT STD_LOGIC;
    G_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_7_o_ap_vld : OUT STD_LOGIC;
    G_8_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_8_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_8_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of axpy_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln9_fu_105_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_reg_285 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_fu_109_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln9_3_reg_290 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_118_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_298 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln9_fu_128_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln9_3_fu_133_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_3_reg_308 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_174_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_47_fu_198_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_reg_86 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln9_fu_124_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component DLU_fadd_32ns_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_mux_94_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DLU_fadd_32ns_32ng8j_U68 : component DLU_fadd_32ns_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_47_reg_318,
        din1 => tmp_reg_323,
        ce => ap_const_logic_1,
        dout => grp_fu_97_p2);

    DLU_fmul_32ns_32ncud_U69 : component DLU_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_46_fu_174_p11,
        din1 => a,
        ce => ap_const_logic_1,
        dout => grp_fu_101_p2);

    DLU_mux_94_32_1_1_U70 : component DLU_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => G_0_i,
        din1 => G_1_i,
        din2 => G_2_i,
        din3 => G_3_i,
        din4 => G_4_i,
        din5 => G_5_i,
        din6 => G_6_i,
        din7 => G_7_i,
        din8 => G_8_i,
        din9 => add_ln9_reg_303,
        dout => tmp_46_fu_174_p11);

    DLU_mux_94_32_1_1_U71 : component DLU_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => G_0_i,
        din1 => G_1_i,
        din2 => G_2_i,
        din3 => G_3_i,
        din4 => G_4_i,
        din5 => G_5_i,
        din6 => G_6_i,
        din7 => G_7_i,
        din8 => G_8_i,
        din9 => add_ln9_3_reg_308,
        dout => tmp_47_fu_198_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_86 <= i_reg_298;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_86 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln9_3_reg_308 <= add_ln9_3_fu_133_p2;
                add_ln9_reg_303 <= add_ln9_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_298 <= i_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_47_reg_318 <= tmp_47_fu_198_p11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_reg_323 <= grp_fu_101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                trunc_ln9_3_reg_290 <= trunc_ln9_3_fu_109_p1;
                trunc_ln9_reg_285 <= trunc_ln9_fu_105_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_113_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln7_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    G_0_o_assign_proc : process(G_0_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_0 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_0_o <= grp_fu_97_p2;
        else 
            G_0_o <= G_0_i;
        end if; 
    end process;


    G_0_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_0 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_0_o_ap_vld <= ap_const_logic_1;
        else 
            G_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_1_o_assign_proc : process(G_1_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_1 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_1_o <= grp_fu_97_p2;
        else 
            G_1_o <= G_1_i;
        end if; 
    end process;


    G_1_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_1 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_1_o_ap_vld <= ap_const_logic_1;
        else 
            G_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_2_o_assign_proc : process(G_2_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_2 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_2_o <= grp_fu_97_p2;
        else 
            G_2_o <= G_2_i;
        end if; 
    end process;


    G_2_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_2 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_2_o_ap_vld <= ap_const_logic_1;
        else 
            G_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_3_o_assign_proc : process(G_3_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_3 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_3_o <= grp_fu_97_p2;
        else 
            G_3_o <= G_3_i;
        end if; 
    end process;


    G_3_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_3 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_3_o_ap_vld <= ap_const_logic_1;
        else 
            G_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_4_o_assign_proc : process(G_4_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_4 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_4_o <= grp_fu_97_p2;
        else 
            G_4_o <= G_4_i;
        end if; 
    end process;


    G_4_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_4 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_4_o_ap_vld <= ap_const_logic_1;
        else 
            G_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_5_o_assign_proc : process(G_5_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_5 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_5_o <= grp_fu_97_p2;
        else 
            G_5_o <= G_5_i;
        end if; 
    end process;


    G_5_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_5 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_5_o_ap_vld <= ap_const_logic_1;
        else 
            G_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_6_o_assign_proc : process(G_6_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_6 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_6_o <= grp_fu_97_p2;
        else 
            G_6_o <= G_6_i;
        end if; 
    end process;


    G_6_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_6 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_6_o_ap_vld <= ap_const_logic_1;
        else 
            G_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_7_o_assign_proc : process(G_7_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if (((ap_const_lv4_7 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_7_o <= grp_fu_97_p2;
        else 
            G_7_o <= G_7_i;
        end if; 
    end process;


    G_7_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv4_7 = add_ln9_3_reg_308) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_7_o_ap_vld <= ap_const_logic_1;
        else 
            G_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_8_o_assign_proc : process(G_8_i, add_ln9_3_reg_308, ap_CS_fsm_state11, grp_fu_97_p2)
    begin
        if ((not((ap_const_lv4_0 = add_ln9_3_reg_308)) and not((ap_const_lv4_1 = add_ln9_3_reg_308)) and not((ap_const_lv4_2 = add_ln9_3_reg_308)) and not((ap_const_lv4_3 = add_ln9_3_reg_308)) and not((ap_const_lv4_4 = add_ln9_3_reg_308)) and not((ap_const_lv4_5 = add_ln9_3_reg_308)) and not((ap_const_lv4_6 = add_ln9_3_reg_308)) and not((ap_const_lv4_7 = add_ln9_3_reg_308)) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_8_o <= grp_fu_97_p2;
        else 
            G_8_o <= G_8_i;
        end if; 
    end process;


    G_8_o_ap_vld_assign_proc : process(add_ln9_3_reg_308, ap_CS_fsm_state11)
    begin
        if ((not((ap_const_lv4_0 = add_ln9_3_reg_308)) and not((ap_const_lv4_1 = add_ln9_3_reg_308)) and not((ap_const_lv4_2 = add_ln9_3_reg_308)) and not((ap_const_lv4_3 = add_ln9_3_reg_308)) and not((ap_const_lv4_4 = add_ln9_3_reg_308)) and not((ap_const_lv4_5 = add_ln9_3_reg_308)) and not((ap_const_lv4_6 = add_ln9_3_reg_308)) and not((ap_const_lv4_7 = add_ln9_3_reg_308)) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            G_8_o_ap_vld <= ap_const_logic_1;
        else 
            G_8_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln9_3_fu_133_p2 <= std_logic_vector(unsigned(zext_ln9_fu_124_p1) + unsigned(trunc_ln9_3_reg_290));
    add_ln9_fu_128_p2 <= std_logic_vector(unsigned(zext_ln9_fu_124_p1) + unsigned(trunc_ln9_reg_285));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln7_fu_113_p2)
    begin
        if ((((icmp_ln7_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln7_fu_113_p2)
    begin
        if (((icmp_ln7_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_118_p2 <= std_logic_vector(unsigned(i_0_reg_86) + unsigned(ap_const_lv2_1));
    icmp_ln7_fu_113_p2 <= "1" when (i_0_reg_86 = n) else "0";
    trunc_ln9_3_fu_109_p1 <= y_offset(4 - 1 downto 0);
    trunc_ln9_fu_105_p1 <= x_offset(4 - 1 downto 0);
    zext_ln9_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_86),4));
end behav;
