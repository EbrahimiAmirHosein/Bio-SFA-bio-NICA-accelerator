-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity triangular_invert is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    G_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_0_o_ap_vld : OUT STD_LOGIC;
    G_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_1_o_ap_vld : OUT STD_LOGIC;
    G_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_2_o_ap_vld : OUT STD_LOGIC;
    G_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_3_o_ap_vld : OUT STD_LOGIC;
    G_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_4_o_ap_vld : OUT STD_LOGIC;
    G_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_5_o_ap_vld : OUT STD_LOGIC;
    G_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_6_o_ap_vld : OUT STD_LOGIC;
    G_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_7_o_ap_vld : OUT STD_LOGIC;
    G_8_i : IN STD_LOGIC_VECTOR (31 downto 0);
    G_8_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_8_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of triangular_invert is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln63_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln63_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln63_1_fu_219_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln63_1_reg_438 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln63_2_fu_223_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln63_2_reg_443 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_fu_233_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_451 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln65_fu_247_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln65_reg_456 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln63_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_8_assign_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_ln66_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln66_reg_466 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln66_1_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln66_1_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln66_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln68_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln70_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln70_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln70_fu_322_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_327_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_547 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_355_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_axpy_1_fu_109_ap_start : STD_LOGIC;
    signal grp_axpy_1_fu_109_ap_done : STD_LOGIC;
    signal grp_axpy_1_fu_109_ap_idle : STD_LOGIC;
    signal grp_axpy_1_fu_109_ap_ready : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_0_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_1_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_2_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_3_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_3_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_4_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_4_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_5_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_5_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_6_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_6_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_7_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_7_o_ap_vld : STD_LOGIC;
    signal grp_axpy_1_fu_109_G_8_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_G_8_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_ap_start : STD_LOGIC;
    signal grp_scal_fu_136_ap_done : STD_LOGIC;
    signal grp_scal_fu_136_ap_idle : STD_LOGIC;
    signal grp_scal_fu_136_ap_ready : STD_LOGIC;
    signal grp_scal_fu_136_G_0_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_0_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_1_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_2_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_3_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_3_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_4_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_4_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_5_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_5_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_6_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_6_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_7_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_7_o_ap_vld : STD_LOGIC;
    signal grp_scal_fu_136_G_8_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scal_fu_136_G_8_o_ap_vld : STD_LOGIC;
    signal ap_phi_mux_k_0_phi_fu_68_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_0_reg_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_phi_ln65_phi_fu_79_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_in_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_phi_mux_phi_ln71_phi_fu_100_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_axpy_1_fu_109_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_scal_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln66_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln66_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln66_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln70_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln70_fu_318_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_327_p10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component axpy_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (1 downto 0);
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        y_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        G_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_0_o_ap_vld : OUT STD_LOGIC;
        G_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_1_o_ap_vld : OUT STD_LOGIC;
        G_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_2_o_ap_vld : OUT STD_LOGIC;
        G_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_3_o_ap_vld : OUT STD_LOGIC;
        G_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_4_o_ap_vld : OUT STD_LOGIC;
        G_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_5_o_ap_vld : OUT STD_LOGIC;
        G_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_6_o_ap_vld : OUT STD_LOGIC;
        G_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_7_o_ap_vld : OUT STD_LOGIC;
        G_8_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_8_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_8_o_ap_vld : OUT STD_LOGIC );
    end component;


    component scal IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (1 downto 0);
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        x_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        G_0_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_0_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_0_o_ap_vld : OUT STD_LOGIC;
        G_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_1_o_ap_vld : OUT STD_LOGIC;
        G_2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_2_o_ap_vld : OUT STD_LOGIC;
        G_3_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_3_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_3_o_ap_vld : OUT STD_LOGIC;
        G_4_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_4_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_4_o_ap_vld : OUT STD_LOGIC;
        G_5_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_5_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_5_o_ap_vld : OUT STD_LOGIC;
        G_6_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_6_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_6_o_ap_vld : OUT STD_LOGIC;
        G_7_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_7_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_7_o_ap_vld : OUT STD_LOGIC;
        G_8_i : IN STD_LOGIC_VECTOR (31 downto 0);
        G_8_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        G_8_o_ap_vld : OUT STD_LOGIC );
    end component;


    component DLU_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_fdiv_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_mux_94_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_axpy_1_fu_109 : component axpy_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_axpy_1_fu_109_ap_start,
        ap_done => grp_axpy_1_fu_109_ap_done,
        ap_idle => grp_axpy_1_fu_109_ap_idle,
        ap_ready => grp_axpy_1_fu_109_ap_ready,
        n => k_0_reg_64,
        a => tmp_reg_547,
        x_offset => zext_ln66_reg_476,
        y_offset => sub_ln70_reg_537,
        G_0_i => G_0_i,
        G_0_o => grp_axpy_1_fu_109_G_0_o,
        G_0_o_ap_vld => grp_axpy_1_fu_109_G_0_o_ap_vld,
        G_1_i => G_1_i,
        G_1_o => grp_axpy_1_fu_109_G_1_o,
        G_1_o_ap_vld => grp_axpy_1_fu_109_G_1_o_ap_vld,
        G_2_i => G_2_i,
        G_2_o => grp_axpy_1_fu_109_G_2_o,
        G_2_o_ap_vld => grp_axpy_1_fu_109_G_2_o_ap_vld,
        G_3_i => G_3_i,
        G_3_o => grp_axpy_1_fu_109_G_3_o,
        G_3_o_ap_vld => grp_axpy_1_fu_109_G_3_o_ap_vld,
        G_4_i => G_4_i,
        G_4_o => grp_axpy_1_fu_109_G_4_o,
        G_4_o_ap_vld => grp_axpy_1_fu_109_G_4_o_ap_vld,
        G_5_i => G_5_i,
        G_5_o => grp_axpy_1_fu_109_G_5_o,
        G_5_o_ap_vld => grp_axpy_1_fu_109_G_5_o_ap_vld,
        G_6_i => G_6_i,
        G_6_o => grp_axpy_1_fu_109_G_6_o,
        G_6_o_ap_vld => grp_axpy_1_fu_109_G_6_o_ap_vld,
        G_7_i => G_7_i,
        G_7_o => grp_axpy_1_fu_109_G_7_o,
        G_7_o_ap_vld => grp_axpy_1_fu_109_G_7_o_ap_vld,
        G_8_i => G_8_i,
        G_8_o => grp_axpy_1_fu_109_G_8_o,
        G_8_o_ap_vld => grp_axpy_1_fu_109_G_8_o_ap_vld);

    grp_scal_fu_136 : component scal
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scal_fu_136_ap_start,
        ap_done => grp_scal_fu_136_ap_done,
        ap_idle => grp_scal_fu_136_ap_idle,
        ap_ready => grp_scal_fu_136_ap_ready,
        n => k_0_reg_64,
        a => bitcast_ln66_1_reg_471,
        x_offset => zext_ln66_reg_476,
        G_0_i => G_0_i,
        G_0_o => grp_scal_fu_136_G_0_o,
        G_0_o_ap_vld => grp_scal_fu_136_G_0_o_ap_vld,
        G_1_i => G_1_i,
        G_1_o => grp_scal_fu_136_G_1_o,
        G_1_o_ap_vld => grp_scal_fu_136_G_1_o_ap_vld,
        G_2_i => G_2_i,
        G_2_o => grp_scal_fu_136_G_2_o,
        G_2_o_ap_vld => grp_scal_fu_136_G_2_o_ap_vld,
        G_3_i => G_3_i,
        G_3_o => grp_scal_fu_136_G_3_o,
        G_3_o_ap_vld => grp_scal_fu_136_G_3_o_ap_vld,
        G_4_i => G_4_i,
        G_4_o => grp_scal_fu_136_G_4_o,
        G_4_o_ap_vld => grp_scal_fu_136_G_4_o_ap_vld,
        G_5_i => G_5_i,
        G_5_o => grp_scal_fu_136_G_5_o,
        G_5_o_ap_vld => grp_scal_fu_136_G_5_o_ap_vld,
        G_6_i => G_6_i,
        G_6_o => grp_scal_fu_136_G_6_o,
        G_6_o_ap_vld => grp_scal_fu_136_G_6_o_ap_vld,
        G_7_i => G_7_i,
        G_7_o => grp_scal_fu_136_G_7_o,
        G_7_o_ap_vld => grp_scal_fu_136_G_7_o_ap_vld,
        G_8_i => G_8_i,
        G_8_o => grp_scal_fu_136_G_8_o,
        G_8_o_ap_vld => grp_scal_fu_136_G_8_o_ap_vld);

    DLU_fmul_32ns_32ncud_U85 : component DLU_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_fu_355_p11,
        din1 => ap_phi_mux_phi_ln71_phi_fu_100_p6,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    DLU_fdiv_32ns_32ndEe_U86 : component DLU_fdiv_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => ap_phi_mux_phi_ln65_phi_fu_79_p6,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    DLU_mux_94_32_1_1_U87 : component DLU_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => G_0_i,
        din1 => G_1_i,
        din2 => G_2_i,
        din3 => G_3_i,
        din4 => G_4_i,
        din5 => G_5_i,
        din6 => G_6_i,
        din7 => G_7_i,
        din8 => G_8_i,
        din9 => tmp_fu_327_p10,
        dout => tmp_fu_327_p11);

    DLU_mux_94_32_1_1_U88 : component DLU_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => G_0_i,
        din1 => G_1_i,
        din2 => G_2_i,
        din3 => G_3_i,
        din4 => G_4_i,
        din5 => G_5_i,
        din6 => G_6_i,
        din7 => G_7_i,
        din8 => G_8_i,
        din9 => add_ln70_reg_542,
        dout => tmp_2_fu_355_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_axpy_1_fu_109_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_axpy_1_fu_109_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_axpy_1_fu_109_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axpy_1_fu_109_ap_ready = ap_const_logic_1)) then 
                    grp_axpy_1_fu_109_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scal_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scal_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_scal_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scal_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_scal_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_in_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_0_in_reg_88 <= j_reg_482;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_ap_done = ap_const_logic_1))) then 
                j_0_in_reg_88 <= zext_ln63_reg_433;
            end if; 
        end if;
    end process;

    k_0_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln68_fu_301_p2 = ap_const_lv1_1))) then 
                k_0_reg_64 <= k_reg_451;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_64 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                G_8_assign_reg_461 <= grp_fu_167_p2;
                sub_ln66_reg_466 <= sub_ln66_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln70_reg_542 <= add_ln70_fu_322_p2;
                sub_ln70_reg_537 <= sub_ln70_fu_312_p2;
                tmp_reg_547 <= tmp_fu_327_p11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bitcast_ln66_1_reg_471 <= bitcast_ln66_1_fu_282_p1;
                    zext_ln66_reg_476(31 downto 0) <= zext_ln66_fu_290_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                j_reg_482 <= j_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_451 <= k_fu_233_p2;
                    zext_ln63_1_reg_438(1 downto 0) <= zext_ln63_1_fu_219_p1(1 downto 0);
                    zext_ln63_2_reg_443(1 downto 0) <= zext_ln63_2_fu_223_p1(1 downto 0);
                    zext_ln63_reg_433(1 downto 0) <= zext_ln63_fu_215_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln65_reg_456(3 downto 2) <= zext_ln65_fu_247_p1(3 downto 2);
            end if;
        end if;
    end process;
    zext_ln63_reg_433(31 downto 2) <= "000000000000000000000000000000";
    zext_ln63_1_reg_438(4 downto 2) <= "000";
    zext_ln63_2_reg_443(3 downto 2) <= "00";
    zext_ln65_reg_456(1 downto 0) <= "00";
    zext_ln65_reg_456(4) <= '0';
    zext_ln66_reg_476(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln63_fu_227_p2, ap_CS_fsm_state20, icmp_ln68_fu_301_p2, grp_axpy_1_fu_109_ap_done, grp_scal_fu_136_ap_done, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln63_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln68_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    G_0_o_assign_proc : process(G_0_i, grp_fu_167_p2, ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_0_o, grp_axpy_1_fu_109_G_0_o_ap_vld, grp_scal_fu_136_G_0_o, grp_scal_fu_136_G_0_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_0 = add_ln70_reg_542))) then 
            G_0_o <= grp_fu_162_p2;
        elsif (((k_0_reg_64 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            G_0_o <= grp_fu_167_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_0_o_ap_vld = ap_const_logic_1))) then 
            G_0_o <= grp_scal_fu_136_G_0_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_0_o_ap_vld = ap_const_logic_1))) then 
            G_0_o <= grp_axpy_1_fu_109_G_0_o;
        else 
            G_0_o <= G_0_i;
        end if; 
    end process;


    G_0_o_ap_vld_assign_proc : process(ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_0_o_ap_vld, grp_scal_fu_136_G_0_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if ((((k_0_reg_64 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_0 = add_ln70_reg_542)))) then 
            G_0_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_0_o_ap_vld <= grp_scal_fu_136_G_0_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_0_o_ap_vld <= grp_axpy_1_fu_109_G_0_o_ap_vld;
        else 
            G_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_1_o_assign_proc : process(G_1_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_1_o, grp_axpy_1_fu_109_G_1_o_ap_vld, grp_scal_fu_136_G_1_o, grp_scal_fu_136_G_1_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_1 = add_ln70_reg_542))) then 
            G_1_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_1_o_ap_vld = ap_const_logic_1))) then 
            G_1_o <= grp_scal_fu_136_G_1_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_1_o_ap_vld = ap_const_logic_1))) then 
            G_1_o <= grp_axpy_1_fu_109_G_1_o;
        else 
            G_1_o <= G_1_i;
        end if; 
    end process;


    G_1_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_1_o_ap_vld, grp_scal_fu_136_G_1_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_1 = add_ln70_reg_542))) then 
            G_1_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_1_o_ap_vld <= grp_scal_fu_136_G_1_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_1_o_ap_vld <= grp_axpy_1_fu_109_G_1_o_ap_vld;
        else 
            G_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_2_o_assign_proc : process(G_2_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_2_o, grp_axpy_1_fu_109_G_2_o_ap_vld, grp_scal_fu_136_G_2_o, grp_scal_fu_136_G_2_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_2 = add_ln70_reg_542))) then 
            G_2_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_2_o_ap_vld = ap_const_logic_1))) then 
            G_2_o <= grp_scal_fu_136_G_2_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_2_o_ap_vld = ap_const_logic_1))) then 
            G_2_o <= grp_axpy_1_fu_109_G_2_o;
        else 
            G_2_o <= G_2_i;
        end if; 
    end process;


    G_2_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_2_o_ap_vld, grp_scal_fu_136_G_2_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_2 = add_ln70_reg_542))) then 
            G_2_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_2_o_ap_vld <= grp_scal_fu_136_G_2_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_2_o_ap_vld <= grp_axpy_1_fu_109_G_2_o_ap_vld;
        else 
            G_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_3_o_assign_proc : process(G_3_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_3_o, grp_axpy_1_fu_109_G_3_o_ap_vld, grp_scal_fu_136_G_3_o, grp_scal_fu_136_G_3_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_3 = add_ln70_reg_542))) then 
            G_3_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_3_o_ap_vld = ap_const_logic_1))) then 
            G_3_o <= grp_scal_fu_136_G_3_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_3_o_ap_vld = ap_const_logic_1))) then 
            G_3_o <= grp_axpy_1_fu_109_G_3_o;
        else 
            G_3_o <= G_3_i;
        end if; 
    end process;


    G_3_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_3_o_ap_vld, grp_scal_fu_136_G_3_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_3 = add_ln70_reg_542))) then 
            G_3_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_3_o_ap_vld <= grp_scal_fu_136_G_3_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_3_o_ap_vld <= grp_axpy_1_fu_109_G_3_o_ap_vld;
        else 
            G_3_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_4_o_assign_proc : process(G_4_i, grp_fu_167_p2, ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_4_o, grp_axpy_1_fu_109_G_4_o_ap_vld, grp_scal_fu_136_G_4_o, grp_scal_fu_136_G_4_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_4 = add_ln70_reg_542))) then 
            G_4_o <= grp_fu_162_p2;
        elsif (((k_0_reg_64 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            G_4_o <= grp_fu_167_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_4_o_ap_vld = ap_const_logic_1))) then 
            G_4_o <= grp_scal_fu_136_G_4_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_4_o_ap_vld = ap_const_logic_1))) then 
            G_4_o <= grp_axpy_1_fu_109_G_4_o;
        else 
            G_4_o <= G_4_i;
        end if; 
    end process;


    G_4_o_ap_vld_assign_proc : process(ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_4_o_ap_vld, grp_scal_fu_136_G_4_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if ((((k_0_reg_64 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_4 = add_ln70_reg_542)))) then 
            G_4_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_4_o_ap_vld <= grp_scal_fu_136_G_4_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_4_o_ap_vld <= grp_axpy_1_fu_109_G_4_o_ap_vld;
        else 
            G_4_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_5_o_assign_proc : process(G_5_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_5_o, grp_axpy_1_fu_109_G_5_o_ap_vld, grp_scal_fu_136_G_5_o, grp_scal_fu_136_G_5_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_5 = add_ln70_reg_542))) then 
            G_5_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_5_o_ap_vld = ap_const_logic_1))) then 
            G_5_o <= grp_scal_fu_136_G_5_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_5_o_ap_vld = ap_const_logic_1))) then 
            G_5_o <= grp_axpy_1_fu_109_G_5_o;
        else 
            G_5_o <= G_5_i;
        end if; 
    end process;


    G_5_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_5_o_ap_vld, grp_scal_fu_136_G_5_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_5 = add_ln70_reg_542))) then 
            G_5_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_5_o_ap_vld <= grp_scal_fu_136_G_5_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_5_o_ap_vld <= grp_axpy_1_fu_109_G_5_o_ap_vld;
        else 
            G_5_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_6_o_assign_proc : process(G_6_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_6_o, grp_axpy_1_fu_109_G_6_o_ap_vld, grp_scal_fu_136_G_6_o, grp_scal_fu_136_G_6_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_6 = add_ln70_reg_542))) then 
            G_6_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_6_o_ap_vld = ap_const_logic_1))) then 
            G_6_o <= grp_scal_fu_136_G_6_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_6_o_ap_vld = ap_const_logic_1))) then 
            G_6_o <= grp_axpy_1_fu_109_G_6_o;
        else 
            G_6_o <= G_6_i;
        end if; 
    end process;


    G_6_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_6_o_ap_vld, grp_scal_fu_136_G_6_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_6 = add_ln70_reg_542))) then 
            G_6_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_6_o_ap_vld <= grp_scal_fu_136_G_6_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_6_o_ap_vld <= grp_axpy_1_fu_109_G_6_o_ap_vld;
        else 
            G_6_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_7_o_assign_proc : process(G_7_i, add_ln70_reg_542, grp_axpy_1_fu_109_G_7_o, grp_axpy_1_fu_109_G_7_o_ap_vld, grp_scal_fu_136_G_7_o, grp_scal_fu_136_G_7_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_7 = add_ln70_reg_542))) then 
            G_7_o <= grp_fu_162_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_7_o_ap_vld = ap_const_logic_1))) then 
            G_7_o <= grp_scal_fu_136_G_7_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_7_o_ap_vld = ap_const_logic_1))) then 
            G_7_o <= grp_axpy_1_fu_109_G_7_o;
        else 
            G_7_o <= G_7_i;
        end if; 
    end process;


    G_7_o_ap_vld_assign_proc : process(add_ln70_reg_542, grp_axpy_1_fu_109_G_7_o_ap_vld, grp_scal_fu_136_G_7_o_ap_vld, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv4_7 = add_ln70_reg_542))) then 
            G_7_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_7_o_ap_vld <= grp_scal_fu_136_G_7_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_7_o_ap_vld <= grp_axpy_1_fu_109_G_7_o_ap_vld;
        else 
            G_7_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    G_8_o_assign_proc : process(G_8_i, grp_fu_167_p2, ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_8_o, grp_axpy_1_fu_109_G_8_o_ap_vld, grp_scal_fu_136_G_8_o, grp_scal_fu_136_G_8_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22, grp_fu_162_p2)
    begin
        if ((not((ap_const_lv4_0 = add_ln70_reg_542)) and not((ap_const_lv4_1 = add_ln70_reg_542)) and not((ap_const_lv4_2 = add_ln70_reg_542)) and not((ap_const_lv4_3 = add_ln70_reg_542)) and not((ap_const_lv4_4 = add_ln70_reg_542)) and not((ap_const_lv4_5 = add_ln70_reg_542)) and not((ap_const_lv4_6 = add_ln70_reg_542)) and not((ap_const_lv4_7 = add_ln70_reg_542)) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            G_8_o <= grp_fu_162_p2;
        elsif ((not((k_0_reg_64 = ap_const_lv2_1)) and not((k_0_reg_64 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            G_8_o <= grp_fu_167_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_scal_fu_136_G_8_o_ap_vld = ap_const_logic_1))) then 
            G_8_o <= grp_scal_fu_136_G_8_o;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_axpy_1_fu_109_G_8_o_ap_vld = ap_const_logic_1))) then 
            G_8_o <= grp_axpy_1_fu_109_G_8_o;
        else 
            G_8_o <= G_8_i;
        end if; 
    end process;


    G_8_o_ap_vld_assign_proc : process(ap_CS_fsm_state17, add_ln70_reg_542, grp_axpy_1_fu_109_G_8_o_ap_vld, grp_scal_fu_136_G_8_o_ap_vld, k_0_reg_64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state22)
    begin
        if (((not((k_0_reg_64 = ap_const_lv2_1)) and not((k_0_reg_64 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not((ap_const_lv4_0 = add_ln70_reg_542)) and not((ap_const_lv4_1 = add_ln70_reg_542)) and not((ap_const_lv4_2 = add_ln70_reg_542)) and not((ap_const_lv4_3 = add_ln70_reg_542)) and not((ap_const_lv4_4 = add_ln70_reg_542)) and not((ap_const_lv4_5 = add_ln70_reg_542)) and not((ap_const_lv4_6 = add_ln70_reg_542)) and not((ap_const_lv4_7 = add_ln70_reg_542)) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            G_8_o_ap_vld <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G_8_o_ap_vld <= grp_scal_fu_136_G_8_o_ap_vld;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G_8_o_ap_vld <= grp_axpy_1_fu_109_G_8_o_ap_vld;
        else 
            G_8_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln70_fu_322_p2 <= std_logic_vector(unsigned(trunc_ln70_fu_318_p1) + unsigned(zext_ln63_2_reg_443));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln63_fu_227_p2)
    begin
        if ((((icmp_ln63_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_k_0_phi_fu_68_p4 <= k_0_reg_64;

    ap_phi_mux_phi_ln65_phi_fu_79_p6_assign_proc : process(G_0_i, G_4_i, G_8_i, ap_CS_fsm_state2, icmp_ln63_fu_227_p2, ap_phi_mux_k_0_phi_fu_68_p4)
    begin
        if (((icmp_ln63_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if ((not((ap_phi_mux_k_0_phi_fu_68_p4 = ap_const_lv2_1)) and not((ap_phi_mux_k_0_phi_fu_68_p4 = ap_const_lv2_0)))) then 
                ap_phi_mux_phi_ln65_phi_fu_79_p6 <= G_8_i;
            elsif ((ap_phi_mux_k_0_phi_fu_68_p4 = ap_const_lv2_1)) then 
                ap_phi_mux_phi_ln65_phi_fu_79_p6 <= G_4_i;
            elsif ((ap_phi_mux_k_0_phi_fu_68_p4 = ap_const_lv2_0)) then 
                ap_phi_mux_phi_ln65_phi_fu_79_p6 <= G_0_i;
            else 
                ap_phi_mux_phi_ln65_phi_fu_79_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln65_phi_fu_79_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_phi_ln71_phi_fu_100_p6_assign_proc : process(G_0_i, G_4_i, G_8_i, ap_CS_fsm_state23, k_0_reg_64)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
            if ((not((k_0_reg_64 = ap_const_lv2_1)) and not((k_0_reg_64 = ap_const_lv2_0)))) then 
                ap_phi_mux_phi_ln71_phi_fu_100_p6 <= G_8_i;
            elsif ((k_0_reg_64 = ap_const_lv2_1)) then 
                ap_phi_mux_phi_ln71_phi_fu_100_p6 <= G_4_i;
            elsif ((k_0_reg_64 = ap_const_lv2_0)) then 
                ap_phi_mux_phi_ln71_phi_fu_100_p6 <= G_0_i;
            else 
                ap_phi_mux_phi_ln71_phi_fu_100_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln71_phi_fu_100_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln63_fu_227_p2)
    begin
        if (((icmp_ln63_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln66_1_fu_282_p1 <= xor_ln66_fu_276_p2;
    bitcast_ln66_fu_273_p1 <= G_8_assign_reg_461;
    grp_axpy_1_fu_109_ap_start <= grp_axpy_1_fu_109_ap_start_reg;
    grp_scal_fu_136_ap_start <= grp_scal_fu_136_ap_start_reg;
    icmp_ln63_fu_227_p2 <= "1" when (k_0_reg_64 = ap_const_lv2_3) else "0";
    icmp_ln68_fu_301_p2 <= "1" when (j_0_in_reg_88 = ap_const_lv32_2) else "0";
    j_fu_295_p2 <= std_logic_vector(unsigned(j_0_in_reg_88) + unsigned(ap_const_lv32_1));
    k_fu_233_p2 <= std_logic_vector(unsigned(k_0_reg_64) + unsigned(ap_const_lv2_1));
        sext_ln66_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln66_reg_466),32));

    shl_ln70_fu_307_p2 <= std_logic_vector(shift_left(unsigned(j_reg_482),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln_fu_239_p3 <= (k_0_reg_64 & ap_const_lv2_0);
    sub_ln66_fu_269_p2 <= std_logic_vector(unsigned(zext_ln65_reg_456) - unsigned(zext_ln63_1_reg_438));
    sub_ln70_fu_312_p2 <= std_logic_vector(unsigned(shl_ln70_fu_307_p2) - unsigned(j_reg_482));
    tmp_fu_327_p10 <= std_logic_vector(unsigned(trunc_ln70_fu_318_p1) + unsigned(zext_ln63_2_reg_443));
    trunc_ln70_fu_318_p1 <= sub_ln70_fu_312_p2(4 - 1 downto 0);
    xor_ln66_fu_276_p2 <= (bitcast_ln66_fu_273_p1 xor ap_const_lv32_80000000);
    zext_ln63_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_64),5));
    zext_ln63_2_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_64),4));
    zext_ln63_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_64),32));
    zext_ln65_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_239_p3),5));
    zext_ln66_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln66_fu_287_p1),64));
end behav;
