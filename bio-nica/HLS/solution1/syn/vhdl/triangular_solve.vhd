-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity triangular_solve is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    b_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_we0 : OUT STD_LOGIC;
    b_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    G_8 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of triangular_solve is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal k_fu_139_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_283 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln37_fu_145_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln37_reg_289 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_fu_159_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_reg_297 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln37_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_163_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_addr_reg_320 : STD_LOGIC_VECTOR (1 downto 0);
    signal bitcast_ln40_1_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_1_reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sub_ln9_fu_200_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln9_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_215_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_338 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln9_fu_225_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln9_reg_343 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln7_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_254_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal b_addr_2_reg_353 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_9_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal k_0_in_reg_67 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln39_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln39_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln37_fu_135_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln37_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln40_fu_176_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln40_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_190_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln40_fu_197_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln7_fu_206_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln9_1_fu_221_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component DLU_fadd_32ns_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_fdiv_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DLU_mux_94_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    DLU_fadd_32ns_32ng8j_U39 : component DLU_fadd_32ns_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_129,
        din1 => tmp_i_reg_358,
        ce => ap_const_logic_1,
        dout => grp_fu_102_p2);

    DLU_fmul_32ns_32ncud_U40 : component DLU_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_fu_254_p11,
        din1 => bitcast_ln40_1_reg_325,
        ce => ap_const_logic_1,
        dout => grp_fu_106_p2);

    DLU_fdiv_32ns_32ndEe_U41 : component DLU_fdiv_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_q0,
        din1 => phi_ln39_reg_78,
        ce => ap_const_logic_1,
        dout => grp_fu_110_p2);

    DLU_mux_94_32_1_1_U42 : component DLU_mux_94_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => G_0,
        din1 => G_1,
        din2 => G_2,
        din3 => G_3,
        din4 => G_4,
        din5 => G_5,
        din6 => G_6,
        din7 => G_7,
        din8 => G_8,
        din9 => add_ln9_reg_343,
        dout => tmp_1_fu_254_p11);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_0_i_reg_90 <= i_reg_338;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_0_i_reg_90 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_in_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln7_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k_0_in_reg_67 <= trunc_ln37_reg_289;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_in_reg_67 <= ap_const_lv2_3;
            end if; 
        end if;
    end process;

    phi_ln39_reg_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                if ((not((trunc_ln_fu_163_p3 = ap_const_lv4_4)) and not((trunc_ln_fu_163_p3 = ap_const_lv4_0)))) then 
                    phi_ln39_reg_78 <= G_8;
                elsif ((trunc_ln_fu_163_p3 = ap_const_lv4_4)) then 
                    phi_ln39_reg_78 <= G_4;
                elsif ((trunc_ln_fu_163_p3 = ap_const_lv4_0)) then 
                    phi_ln39_reg_78 <= G_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln7_fu_210_p2 = ap_const_lv1_1))) then
                add_ln9_reg_343 <= add_ln9_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                b_addr_2_reg_353 <= zext_ln9_fu_278_p1(2 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                b_addr_reg_320 <= zext_ln39_fu_171_p1(2 - 1 downto 0);
                trunc_ln39_reg_297 <= trunc_ln39_fu_159_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                bitcast_ln40_1_reg_325 <= bitcast_ln40_1_fu_186_p1;
                sub_ln9_reg_330 <= sub_ln9_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_reg_338 <= i_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_reg_283 <= k_fu_139_p2;
                trunc_ln37_reg_289 <= trunc_ln37_fu_145_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_129 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_i_9_reg_363 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_i_reg_358 <= grp_fu_106_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln37_fu_153_p2, ap_CS_fsm_state19, icmp_ln7_fu_210_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln37_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln7_fu_210_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln9_fu_225_p2 <= std_logic_vector(unsigned(sub_ln9_reg_330) + unsigned(zext_ln9_1_fu_221_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln37_fu_153_p2)
    begin
        if ((((icmp_ln37_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln37_fu_153_p2)
    begin
        if (((icmp_ln37_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state2, b_addr_reg_320, ap_CS_fsm_state18, b_addr_2_reg_353, ap_CS_fsm_state22, ap_CS_fsm_state29, zext_ln39_fu_171_p1, zext_ln9_fu_278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            b_address0 <= b_addr_2_reg_353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            b_address0 <= zext_ln9_fu_278_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            b_address0 <= b_addr_reg_320;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            b_address0 <= zext_ln39_fu_171_p1(2 - 1 downto 0);
        else 
            b_address0 <= "XX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_d0_assign_proc : process(ap_CS_fsm_state18, tmp_i_9_reg_363, ap_CS_fsm_state29, grp_fu_110_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            b_d0 <= tmp_i_9_reg_363;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            b_d0 <= grp_fu_110_p2;
        else 
            b_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln40_1_fu_186_p1 <= xor_ln40_fu_180_p2;
    bitcast_ln40_fu_176_p1 <= grp_fu_110_p2;
    i_fu_215_p2 <= std_logic_vector(unsigned(i_0_i_reg_90) + unsigned(ap_const_lv2_1));
    icmp_ln37_fu_153_p2 <= "1" when (k_0_in_reg_67 = ap_const_lv2_0) else "0";
    icmp_ln7_fu_210_p2 <= "1" when (signed(zext_ln7_fu_206_p1) < signed(k_reg_283)) else "0";
    k_fu_139_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(zext_ln37_fu_135_p1));
        sext_ln37_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_fu_139_p2),32));

        sext_ln40_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_reg_283),4));

    sub_ln9_fu_200_p2 <= std_logic_vector(unsigned(tmp_2_fu_190_p3) - unsigned(sext_ln40_fu_197_p1));
    tmp_2_fu_190_p3 <= (trunc_ln39_reg_297 & ap_const_lv2_0);
    trunc_ln37_fu_145_p1 <= k_fu_139_p2(2 - 1 downto 0);
    trunc_ln39_fu_159_p1 <= k_fu_139_p2(2 - 1 downto 0);
    trunc_ln_fu_163_p3 <= (trunc_ln37_fu_145_p1 & ap_const_lv2_0);
    xor_ln40_fu_180_p2 <= (bitcast_ln40_fu_176_p1 xor ap_const_lv32_80000000);
    zext_ln37_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_in_reg_67),3));
    zext_ln39_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_149_p1),64));
    zext_ln7_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_90),3));
    zext_ln9_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_90),4));
    zext_ln9_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_90),64));
end behav;
