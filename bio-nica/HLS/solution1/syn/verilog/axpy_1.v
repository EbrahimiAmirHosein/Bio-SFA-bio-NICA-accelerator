// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module axpy_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        a,
        x_offset,
        y_offset,
        G_0_i,
        G_0_o,
        G_0_o_ap_vld,
        G_1_i,
        G_1_o,
        G_1_o_ap_vld,
        G_2_i,
        G_2_o,
        G_2_o_ap_vld,
        G_3_i,
        G_3_o,
        G_3_o_ap_vld,
        G_4_i,
        G_4_o,
        G_4_o_ap_vld,
        G_5_i,
        G_5_o,
        G_5_o_ap_vld,
        G_6_i,
        G_6_o,
        G_6_o_ap_vld,
        G_7_i,
        G_7_o,
        G_7_o_ap_vld,
        G_8_i,
        G_8_o,
        G_8_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1:0] n;
input  [31:0] a;
input  [63:0] x_offset;
input  [31:0] y_offset;
input  [31:0] G_0_i;
output  [31:0] G_0_o;
output   G_0_o_ap_vld;
input  [31:0] G_1_i;
output  [31:0] G_1_o;
output   G_1_o_ap_vld;
input  [31:0] G_2_i;
output  [31:0] G_2_o;
output   G_2_o_ap_vld;
input  [31:0] G_3_i;
output  [31:0] G_3_o;
output   G_3_o_ap_vld;
input  [31:0] G_4_i;
output  [31:0] G_4_o;
output   G_4_o_ap_vld;
input  [31:0] G_5_i;
output  [31:0] G_5_o;
output   G_5_o_ap_vld;
input  [31:0] G_6_i;
output  [31:0] G_6_o;
output   G_6_o_ap_vld;
input  [31:0] G_7_i;
output  [31:0] G_7_o;
output   G_7_o_ap_vld;
input  [31:0] G_8_i;
output  [31:0] G_8_o;
output   G_8_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] G_0_o;
reg G_0_o_ap_vld;
reg[31:0] G_1_o;
reg G_1_o_ap_vld;
reg[31:0] G_2_o;
reg G_2_o_ap_vld;
reg[31:0] G_3_o;
reg G_3_o_ap_vld;
reg[31:0] G_4_o;
reg G_4_o_ap_vld;
reg[31:0] G_5_o;
reg G_5_o_ap_vld;
reg[31:0] G_6_o;
reg G_6_o_ap_vld;
reg[31:0] G_7_o;
reg G_7_o_ap_vld;
reg[31:0] G_8_o;
reg G_8_o_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] trunc_ln9_fu_105_p1;
reg   [3:0] trunc_ln9_reg_285;
wire   [3:0] trunc_ln9_3_fu_109_p1;
reg   [3:0] trunc_ln9_3_reg_290;
wire   [1:0] i_fu_118_p2;
reg   [1:0] i_reg_298;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln9_fu_128_p2;
reg   [3:0] add_ln9_reg_303;
wire   [0:0] icmp_ln7_fu_113_p2;
wire   [3:0] add_ln9_3_fu_133_p2;
reg   [3:0] add_ln9_3_reg_308;
wire   [31:0] tmp_46_fu_174_p11;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_47_fu_198_p11;
reg   [31:0] tmp_47_reg_318;
wire   [31:0] grp_fu_101_p2;
reg   [31:0] tmp_reg_323;
wire    ap_CS_fsm_state6;
reg   [1:0] i_0_reg_86;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_97_p2;
wire    ap_CS_fsm_state7;
wire   [3:0] zext_ln9_fu_124_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

DLU_fadd_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fadd_32ns_32ng8j_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_47_reg_318),
    .din1(tmp_reg_323),
    .ce(1'b1),
    .dout(grp_fu_97_p2)
);

DLU_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fmul_32ns_32ncud_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_46_fu_174_p11),
    .din1(a),
    .ce(1'b1),
    .dout(grp_fu_101_p2)
);

DLU_mux_94_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
DLU_mux_94_32_1_1_U70(
    .din0(G_0_i),
    .din1(G_1_i),
    .din2(G_2_i),
    .din3(G_3_i),
    .din4(G_4_i),
    .din5(G_5_i),
    .din6(G_6_i),
    .din7(G_7_i),
    .din8(G_8_i),
    .din9(add_ln9_reg_303),
    .dout(tmp_46_fu_174_p11)
);

DLU_mux_94_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
DLU_mux_94_32_1_1_U71(
    .din0(G_0_i),
    .din1(G_1_i),
    .din2(G_2_i),
    .din3(G_3_i),
    .din4(G_4_i),
    .din5(G_5_i),
    .din6(G_6_i),
    .din7(G_7_i),
    .din8(G_8_i),
    .din9(add_ln9_3_reg_308),
    .dout(tmp_47_fu_198_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_86 <= i_reg_298;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_86 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln9_3_reg_308 <= add_ln9_3_fu_133_p2;
        add_ln9_reg_303 <= add_ln9_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_298 <= i_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_47_reg_318 <= tmp_47_fu_198_p11;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_reg_323 <= grp_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        trunc_ln9_3_reg_290 <= trunc_ln9_3_fu_109_p1;
        trunc_ln9_reg_285 <= trunc_ln9_fu_105_p1;
    end
end

always @ (*) begin
    if (((4'd0 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_0_o = grp_fu_97_p2;
    end else begin
        G_0_o = G_0_i;
    end
end

always @ (*) begin
    if (((4'd0 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_0_o_ap_vld = 1'b1;
    end else begin
        G_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd1 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_1_o = grp_fu_97_p2;
    end else begin
        G_1_o = G_1_i;
    end
end

always @ (*) begin
    if (((4'd1 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_1_o_ap_vld = 1'b1;
    end else begin
        G_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd2 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_2_o = grp_fu_97_p2;
    end else begin
        G_2_o = G_2_i;
    end
end

always @ (*) begin
    if (((4'd2 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_2_o_ap_vld = 1'b1;
    end else begin
        G_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd3 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_3_o = grp_fu_97_p2;
    end else begin
        G_3_o = G_3_i;
    end
end

always @ (*) begin
    if (((4'd3 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_3_o_ap_vld = 1'b1;
    end else begin
        G_3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd4 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_4_o = grp_fu_97_p2;
    end else begin
        G_4_o = G_4_i;
    end
end

always @ (*) begin
    if (((4'd4 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_4_o_ap_vld = 1'b1;
    end else begin
        G_4_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd5 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_5_o = grp_fu_97_p2;
    end else begin
        G_5_o = G_5_i;
    end
end

always @ (*) begin
    if (((4'd5 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_5_o_ap_vld = 1'b1;
    end else begin
        G_5_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd6 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_6_o = grp_fu_97_p2;
    end else begin
        G_6_o = G_6_i;
    end
end

always @ (*) begin
    if (((4'd6 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_6_o_ap_vld = 1'b1;
    end else begin
        G_6_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((4'd7 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_7_o = grp_fu_97_p2;
    end else begin
        G_7_o = G_7_i;
    end
end

always @ (*) begin
    if (((4'd7 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_7_o_ap_vld = 1'b1;
    end else begin
        G_7_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(4'd0 == add_ln9_3_reg_308) & ~(4'd1 == add_ln9_3_reg_308) & ~(4'd2 == add_ln9_3_reg_308) & ~(4'd3 == add_ln9_3_reg_308) & ~(4'd4 == add_ln9_3_reg_308) & ~(4'd5 == add_ln9_3_reg_308) & ~(4'd6 == add_ln9_3_reg_308) & ~(4'd7 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_8_o = grp_fu_97_p2;
    end else begin
        G_8_o = G_8_i;
    end
end

always @ (*) begin
    if ((~(4'd0 == add_ln9_3_reg_308) & ~(4'd1 == add_ln9_3_reg_308) & ~(4'd2 == add_ln9_3_reg_308) & ~(4'd3 == add_ln9_3_reg_308) & ~(4'd4 == add_ln9_3_reg_308) & ~(4'd5 == add_ln9_3_reg_308) & ~(4'd6 == add_ln9_3_reg_308) & ~(4'd7 == add_ln9_3_reg_308) & (1'b1 == ap_CS_fsm_state11))) begin
        G_8_o_ap_vld = 1'b1;
    end else begin
        G_8_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln7_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_113_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_3_fu_133_p2 = (zext_ln9_fu_124_p1 + trunc_ln9_3_reg_290);

assign add_ln9_fu_128_p2 = (zext_ln9_fu_124_p1 + trunc_ln9_reg_285);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_118_p2 = (i_0_reg_86 + 2'd1);

assign icmp_ln7_fu_113_p2 = ((i_0_reg_86 == n) ? 1'b1 : 1'b0);

assign trunc_ln9_3_fu_109_p1 = y_offset[3:0];

assign trunc_ln9_fu_105_p1 = x_offset[3:0];

assign zext_ln9_fu_124_p1 = i_0_reg_86;

endmodule //axpy_1
