// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module triangular_solve (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        b_address0,
        b_ce0,
        b_we0,
        b_d0,
        b_q0,
        G_0,
        G_1,
        G_2,
        G_3,
        G_4,
        G_5,
        G_6,
        G_7,
        G_8
);

parameter    ap_ST_fsm_state1 = 29'd1;
parameter    ap_ST_fsm_state2 = 29'd2;
parameter    ap_ST_fsm_state3 = 29'd4;
parameter    ap_ST_fsm_state4 = 29'd8;
parameter    ap_ST_fsm_state5 = 29'd16;
parameter    ap_ST_fsm_state6 = 29'd32;
parameter    ap_ST_fsm_state7 = 29'd64;
parameter    ap_ST_fsm_state8 = 29'd128;
parameter    ap_ST_fsm_state9 = 29'd256;
parameter    ap_ST_fsm_state10 = 29'd512;
parameter    ap_ST_fsm_state11 = 29'd1024;
parameter    ap_ST_fsm_state12 = 29'd2048;
parameter    ap_ST_fsm_state13 = 29'd4096;
parameter    ap_ST_fsm_state14 = 29'd8192;
parameter    ap_ST_fsm_state15 = 29'd16384;
parameter    ap_ST_fsm_state16 = 29'd32768;
parameter    ap_ST_fsm_state17 = 29'd65536;
parameter    ap_ST_fsm_state18 = 29'd131072;
parameter    ap_ST_fsm_state19 = 29'd262144;
parameter    ap_ST_fsm_state20 = 29'd524288;
parameter    ap_ST_fsm_state21 = 29'd1048576;
parameter    ap_ST_fsm_state22 = 29'd2097152;
parameter    ap_ST_fsm_state23 = 29'd4194304;
parameter    ap_ST_fsm_state24 = 29'd8388608;
parameter    ap_ST_fsm_state25 = 29'd16777216;
parameter    ap_ST_fsm_state26 = 29'd33554432;
parameter    ap_ST_fsm_state27 = 29'd67108864;
parameter    ap_ST_fsm_state28 = 29'd134217728;
parameter    ap_ST_fsm_state29 = 29'd268435456;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] b_address0;
output   b_ce0;
output   b_we0;
output  [31:0] b_d0;
input  [31:0] b_q0;
input  [31:0] G_0;
input  [31:0] G_1;
input  [31:0] G_2;
input  [31:0] G_3;
input  [31:0] G_4;
input  [31:0] G_5;
input  [31:0] G_6;
input  [31:0] G_7;
input  [31:0] G_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] b_address0;
reg b_ce0;
reg b_we0;
reg[31:0] b_d0;

(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_129;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state23;
wire  signed [2:0] k_fu_139_p2;
reg  signed [2:0] k_reg_283;
wire    ap_CS_fsm_state2;
wire   [1:0] trunc_ln37_fu_145_p1;
reg   [1:0] trunc_ln37_reg_289;
wire   [1:0] trunc_ln39_fu_159_p1;
reg   [1:0] trunc_ln39_reg_297;
wire   [0:0] icmp_ln37_fu_153_p2;
wire   [3:0] trunc_ln_fu_163_p3;
reg   [1:0] b_addr_reg_320;
wire   [31:0] bitcast_ln40_1_fu_186_p1;
reg   [31:0] bitcast_ln40_1_reg_325;
wire    ap_CS_fsm_state18;
wire   [3:0] sub_ln9_fu_200_p2;
reg   [3:0] sub_ln9_reg_330;
wire   [1:0] i_fu_215_p2;
reg   [1:0] i_reg_338;
wire    ap_CS_fsm_state19;
wire   [3:0] add_ln9_fu_225_p2;
reg   [3:0] add_ln9_reg_343;
wire   [0:0] icmp_ln7_fu_210_p2;
wire   [31:0] tmp_1_fu_254_p11;
wire    ap_CS_fsm_state20;
reg   [1:0] b_addr_2_reg_353;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_106_p2;
reg   [31:0] tmp_i_reg_358;
wire   [31:0] grp_fu_102_p2;
reg   [31:0] tmp_i_9_reg_363;
wire    ap_CS_fsm_state28;
reg   [1:0] k_0_in_reg_67;
reg   [31:0] phi_ln39_reg_78;
reg   [1:0] i_0_i_reg_90;
wire    ap_CS_fsm_state29;
wire   [63:0] zext_ln39_fu_171_p1;
wire   [63:0] zext_ln9_fu_278_p1;
wire   [31:0] grp_fu_110_p2;
wire    ap_CS_fsm_state24;
wire   [2:0] zext_ln37_fu_135_p1;
wire  signed [31:0] sext_ln37_fu_149_p1;
wire   [31:0] bitcast_ln40_fu_176_p1;
wire   [31:0] xor_ln40_fu_180_p2;
wire   [3:0] tmp_2_fu_190_p3;
wire  signed [3:0] sext_ln40_fu_197_p1;
wire   [2:0] zext_ln7_fu_206_p1;
wire   [3:0] zext_ln9_1_fu_221_p1;
reg   [28:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'd1;
end

DLU_fadd_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fadd_32ns_32ng8j_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_129),
    .din1(tmp_i_reg_358),
    .ce(1'b1),
    .dout(grp_fu_102_p2)
);

DLU_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fmul_32ns_32ncud_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_fu_254_p11),
    .din1(bitcast_ln40_1_reg_325),
    .ce(1'b1),
    .dout(grp_fu_106_p2)
);

DLU_fdiv_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
DLU_fdiv_32ns_32ndEe_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_q0),
    .din1(phi_ln39_reg_78),
    .ce(1'b1),
    .dout(grp_fu_110_p2)
);

DLU_mux_94_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
DLU_mux_94_32_1_1_U42(
    .din0(G_0),
    .din1(G_1),
    .din2(G_2),
    .din3(G_3),
    .din4(G_4),
    .din5(G_5),
    .din6(G_6),
    .din7(G_7),
    .din8(G_8),
    .din9(add_ln9_reg_343),
    .dout(tmp_1_fu_254_p11)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_0_i_reg_90 <= i_reg_338;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_0_i_reg_90 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        k_0_in_reg_67 <= trunc_ln37_reg_289;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_in_reg_67 <= 2'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((~(trunc_ln_fu_163_p3 == 4'd4) & ~(trunc_ln_fu_163_p3 == 4'd0))) begin
            phi_ln39_reg_78 <= G_8;
        end else if ((trunc_ln_fu_163_p3 == 4'd4)) begin
            phi_ln39_reg_78 <= G_4;
        end else if ((trunc_ln_fu_163_p3 == 4'd0)) begin
            phi_ln39_reg_78 <= G_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln7_fu_210_p2 == 1'd1))) begin
        add_ln9_reg_343 <= add_ln9_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        b_addr_2_reg_353 <= zext_ln9_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        b_addr_reg_320 <= zext_ln39_fu_171_p1;
        trunc_ln39_reg_297 <= trunc_ln39_fu_159_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bitcast_ln40_1_reg_325 <= bitcast_ln40_1_fu_186_p1;
        sub_ln9_reg_330 <= sub_ln9_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_338 <= i_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_reg_283 <= k_fu_139_p2;
        trunc_ln37_reg_289 <= trunc_ln37_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_129 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_i_9_reg_363 <= grp_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_i_reg_358 <= grp_fu_106_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln37_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        b_address0 = b_addr_2_reg_353;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        b_address0 = zext_ln9_fu_278_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        b_address0 = b_addr_reg_320;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = zext_ln39_fu_171_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        b_d0 = tmp_i_9_reg_363;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        b_d0 = grp_fu_110_p2;
    end else begin
        b_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state18))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln37_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln7_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_fu_225_p2 = (sub_ln9_reg_330 + zext_ln9_1_fu_221_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign bitcast_ln40_1_fu_186_p1 = xor_ln40_fu_180_p2;

assign bitcast_ln40_fu_176_p1 = grp_fu_110_p2;

assign i_fu_215_p2 = (i_0_i_reg_90 + 2'd1);

assign icmp_ln37_fu_153_p2 = ((k_0_in_reg_67 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_210_p2 = (($signed(zext_ln7_fu_206_p1) < $signed(k_reg_283)) ? 1'b1 : 1'b0);

assign k_fu_139_p2 = ($signed(3'd7) + $signed(zext_ln37_fu_135_p1));

assign sext_ln37_fu_149_p1 = k_fu_139_p2;

assign sext_ln40_fu_197_p1 = k_reg_283;

assign sub_ln9_fu_200_p2 = ($signed(tmp_2_fu_190_p3) - $signed(sext_ln40_fu_197_p1));

assign tmp_2_fu_190_p3 = {{trunc_ln39_reg_297}, {2'd0}};

assign trunc_ln37_fu_145_p1 = k_fu_139_p2[1:0];

assign trunc_ln39_fu_159_p1 = k_fu_139_p2[1:0];

assign trunc_ln_fu_163_p3 = {{trunc_ln37_fu_145_p1}, {2'd0}};

assign xor_ln40_fu_180_p2 = (bitcast_ln40_fu_176_p1 ^ 32'd2147483648);

assign zext_ln37_fu_135_p1 = k_0_in_reg_67;

assign zext_ln39_fu_171_p1 = $unsigned(sext_ln37_fu_149_p1);

assign zext_ln7_fu_206_p1 = i_0_i_reg_90;

assign zext_ln9_1_fu_221_p1 = i_0_i_reg_90;

assign zext_ln9_fu_278_p1 = i_0_i_reg_90;

endmodule //triangular_solve
