// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _scal_HH_
#define _scal_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "DLU_fmul_32ns_32ncud.h"
#include "DLU_mux_94_32_1_1.h"

namespace ap_rtl {

struct scal : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<2> > n;
    sc_in< sc_lv<32> > a;
    sc_in< sc_lv<64> > x_offset;
    sc_in< sc_lv<32> > G_0_i;
    sc_out< sc_lv<32> > G_0_o;
    sc_out< sc_logic > G_0_o_ap_vld;
    sc_in< sc_lv<32> > G_1_i;
    sc_out< sc_lv<32> > G_1_o;
    sc_out< sc_logic > G_1_o_ap_vld;
    sc_in< sc_lv<32> > G_2_i;
    sc_out< sc_lv<32> > G_2_o;
    sc_out< sc_logic > G_2_o_ap_vld;
    sc_in< sc_lv<32> > G_3_i;
    sc_out< sc_lv<32> > G_3_o;
    sc_out< sc_logic > G_3_o_ap_vld;
    sc_in< sc_lv<32> > G_4_i;
    sc_out< sc_lv<32> > G_4_o;
    sc_out< sc_logic > G_4_o_ap_vld;
    sc_in< sc_lv<32> > G_5_i;
    sc_out< sc_lv<32> > G_5_o;
    sc_out< sc_logic > G_5_o_ap_vld;
    sc_in< sc_lv<32> > G_6_i;
    sc_out< sc_lv<32> > G_6_o;
    sc_out< sc_logic > G_6_o_ap_vld;
    sc_in< sc_lv<32> > G_7_i;
    sc_out< sc_lv<32> > G_7_o;
    sc_out< sc_logic > G_7_o_ap_vld;
    sc_in< sc_lv<32> > G_8_i;
    sc_out< sc_lv<32> > G_8_o;
    sc_out< sc_logic > G_8_o_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    scal(sc_module_name name);
    SC_HAS_PROCESS(scal);

    ~scal();

    sc_trace_file* mVcdFile;

    DLU_fmul_32ns_32ncud<1,4,32,32,32>* DLU_fmul_32ns_32ncud_U54;
    DLU_mux_94_32_1_1<1,1,32,32,32,32,32,32,32,32,32,4,32>* DLU_mux_94_32_1_1_U55;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > trunc_ln27_fu_91_p1;
    sc_signal< sc_lv<4> > trunc_ln27_reg_239;
    sc_signal< sc_lv<2> > i_fu_100_p2;
    sc_signal< sc_lv<2> > i_reg_247;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > add_ln27_fu_110_p2;
    sc_signal< sc_lv<4> > add_ln27_reg_252;
    sc_signal< sc_lv<1> > icmp_ln25_fu_95_p2;
    sc_signal< sc_lv<32> > tmp_fu_151_p11;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > i_0_reg_76;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > grp_fu_87_p2;
    sc_signal< sc_lv<4> > zext_ln27_fu_106_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_G_0_o();
    void thread_G_0_o_ap_vld();
    void thread_G_1_o();
    void thread_G_1_o_ap_vld();
    void thread_G_2_o();
    void thread_G_2_o_ap_vld();
    void thread_G_3_o();
    void thread_G_3_o_ap_vld();
    void thread_G_4_o();
    void thread_G_4_o_ap_vld();
    void thread_G_5_o();
    void thread_G_5_o_ap_vld();
    void thread_G_6_o();
    void thread_G_6_o_ap_vld();
    void thread_G_7_o();
    void thread_G_7_o_ap_vld();
    void thread_G_8_o();
    void thread_G_8_o_ap_vld();
    void thread_add_ln27_fu_110_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_100_p2();
    void thread_icmp_ln25_fu_95_p2();
    void thread_trunc_ln27_fu_91_p1();
    void thread_zext_ln27_fu_106_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
