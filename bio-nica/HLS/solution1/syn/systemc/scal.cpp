// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "scal.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic scal::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic scal::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> scal::ap_ST_fsm_state1 = "1";
const sc_lv<6> scal::ap_ST_fsm_state2 = "10";
const sc_lv<6> scal::ap_ST_fsm_state3 = "100";
const sc_lv<6> scal::ap_ST_fsm_state4 = "1000";
const sc_lv<6> scal::ap_ST_fsm_state5 = "10000";
const sc_lv<6> scal::ap_ST_fsm_state6 = "100000";
const sc_lv<32> scal::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> scal::ap_const_lv32_1 = "1";
const sc_lv<1> scal::ap_const_lv1_0 = "0";
const sc_lv<32> scal::ap_const_lv32_2 = "10";
const sc_lv<2> scal::ap_const_lv2_0 = "00";
const sc_lv<32> scal::ap_const_lv32_5 = "101";
const sc_lv<4> scal::ap_const_lv4_7 = "111";
const sc_lv<4> scal::ap_const_lv4_6 = "110";
const sc_lv<4> scal::ap_const_lv4_5 = "101";
const sc_lv<4> scal::ap_const_lv4_4 = "100";
const sc_lv<4> scal::ap_const_lv4_3 = "11";
const sc_lv<4> scal::ap_const_lv4_2 = "10";
const sc_lv<4> scal::ap_const_lv4_1 = "1";
const sc_lv<4> scal::ap_const_lv4_0 = "0000";
const sc_lv<2> scal::ap_const_lv2_1 = "1";
const sc_lv<1> scal::ap_const_lv1_1 = "1";
const bool scal::ap_const_boolean_1 = true;

scal::scal(sc_module_name name) : sc_module(name), mVcdFile(0) {
    DLU_fmul_32ns_32ncud_U54 = new DLU_fmul_32ns_32ncud<1,4,32,32,32>("DLU_fmul_32ns_32ncud_U54");
    DLU_fmul_32ns_32ncud_U54->clk(ap_clk);
    DLU_fmul_32ns_32ncud_U54->reset(ap_rst);
    DLU_fmul_32ns_32ncud_U54->din0(tmp_fu_151_p11);
    DLU_fmul_32ns_32ncud_U54->din1(a);
    DLU_fmul_32ns_32ncud_U54->ce(ap_var_for_const0);
    DLU_fmul_32ns_32ncud_U54->dout(grp_fu_87_p2);
    DLU_mux_94_32_1_1_U55 = new DLU_mux_94_32_1_1<1,1,32,32,32,32,32,32,32,32,32,4,32>("DLU_mux_94_32_1_1_U55");
    DLU_mux_94_32_1_1_U55->din0(G_0_i);
    DLU_mux_94_32_1_1_U55->din1(G_1_i);
    DLU_mux_94_32_1_1_U55->din2(G_2_i);
    DLU_mux_94_32_1_1_U55->din3(G_3_i);
    DLU_mux_94_32_1_1_U55->din4(G_4_i);
    DLU_mux_94_32_1_1_U55->din5(G_5_i);
    DLU_mux_94_32_1_1_U55->din6(G_6_i);
    DLU_mux_94_32_1_1_U55->din7(G_7_i);
    DLU_mux_94_32_1_1_U55->din8(G_8_i);
    DLU_mux_94_32_1_1_U55->din9(add_ln27_reg_252);
    DLU_mux_94_32_1_1_U55->dout(tmp_fu_151_p11);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_G_0_o);
    sensitive << ( G_0_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_0_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_1_o);
    sensitive << ( G_1_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_1_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_2_o);
    sensitive << ( G_2_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_2_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_3_o);
    sensitive << ( G_3_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_3_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_4_o);
    sensitive << ( G_4_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_4_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_5_o);
    sensitive << ( G_5_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_5_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_6_o);
    sensitive << ( G_6_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_6_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_7_o);
    sensitive << ( G_7_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_7_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_G_8_o);
    sensitive << ( G_8_i );
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_87_p2 );

    SC_METHOD(thread_G_8_o_ap_vld);
    sensitive << ( add_ln27_reg_252 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_add_ln27_fu_110_p2);
    sensitive << ( trunc_ln27_reg_239 );
    sensitive << ( zext_ln27_fu_106_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_95_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_95_p2 );

    SC_METHOD(thread_i_fu_100_p2);
    sensitive << ( i_0_reg_76 );

    SC_METHOD(thread_icmp_ln25_fu_95_p2);
    sensitive << ( n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_76 );

    SC_METHOD(thread_trunc_ln27_fu_91_p1);
    sensitive << ( x_offset );

    SC_METHOD(thread_zext_ln27_fu_106_p1);
    sensitive << ( i_0_reg_76 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_95_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "scal_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, x_offset, "(port)x_offset");
    sc_trace(mVcdFile, G_0_i, "(port)G_0_i");
    sc_trace(mVcdFile, G_0_o, "(port)G_0_o");
    sc_trace(mVcdFile, G_0_o_ap_vld, "(port)G_0_o_ap_vld");
    sc_trace(mVcdFile, G_1_i, "(port)G_1_i");
    sc_trace(mVcdFile, G_1_o, "(port)G_1_o");
    sc_trace(mVcdFile, G_1_o_ap_vld, "(port)G_1_o_ap_vld");
    sc_trace(mVcdFile, G_2_i, "(port)G_2_i");
    sc_trace(mVcdFile, G_2_o, "(port)G_2_o");
    sc_trace(mVcdFile, G_2_o_ap_vld, "(port)G_2_o_ap_vld");
    sc_trace(mVcdFile, G_3_i, "(port)G_3_i");
    sc_trace(mVcdFile, G_3_o, "(port)G_3_o");
    sc_trace(mVcdFile, G_3_o_ap_vld, "(port)G_3_o_ap_vld");
    sc_trace(mVcdFile, G_4_i, "(port)G_4_i");
    sc_trace(mVcdFile, G_4_o, "(port)G_4_o");
    sc_trace(mVcdFile, G_4_o_ap_vld, "(port)G_4_o_ap_vld");
    sc_trace(mVcdFile, G_5_i, "(port)G_5_i");
    sc_trace(mVcdFile, G_5_o, "(port)G_5_o");
    sc_trace(mVcdFile, G_5_o_ap_vld, "(port)G_5_o_ap_vld");
    sc_trace(mVcdFile, G_6_i, "(port)G_6_i");
    sc_trace(mVcdFile, G_6_o, "(port)G_6_o");
    sc_trace(mVcdFile, G_6_o_ap_vld, "(port)G_6_o_ap_vld");
    sc_trace(mVcdFile, G_7_i, "(port)G_7_i");
    sc_trace(mVcdFile, G_7_o, "(port)G_7_o");
    sc_trace(mVcdFile, G_7_o_ap_vld, "(port)G_7_o_ap_vld");
    sc_trace(mVcdFile, G_8_i, "(port)G_8_i");
    sc_trace(mVcdFile, G_8_o, "(port)G_8_o");
    sc_trace(mVcdFile, G_8_o_ap_vld, "(port)G_8_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, trunc_ln27_fu_91_p1, "trunc_ln27_fu_91_p1");
    sc_trace(mVcdFile, trunc_ln27_reg_239, "trunc_ln27_reg_239");
    sc_trace(mVcdFile, i_fu_100_p2, "i_fu_100_p2");
    sc_trace(mVcdFile, i_reg_247, "i_reg_247");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln27_fu_110_p2, "add_ln27_fu_110_p2");
    sc_trace(mVcdFile, add_ln27_reg_252, "add_ln27_reg_252");
    sc_trace(mVcdFile, icmp_ln25_fu_95_p2, "icmp_ln25_fu_95_p2");
    sc_trace(mVcdFile, tmp_fu_151_p11, "tmp_fu_151_p11");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_76, "i_0_reg_76");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_87_p2, "grp_fu_87_p2");
    sc_trace(mVcdFile, zext_ln27_fu_106_p1, "zext_ln27_fu_106_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

scal::~scal() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete DLU_fmul_32ns_32ncud_U54;
    delete DLU_mux_94_32_1_1_U55;
}

void scal::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void scal::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_0_reg_76 = i_reg_247.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_76 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_95_p2.read(), ap_const_lv1_0))) {
        add_ln27_reg_252 = add_ln27_fu_110_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_247 = i_fu_100_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        trunc_ln27_reg_239 = trunc_ln27_fu_91_p1.read();
    }
}

void scal::thread_G_0_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_0))) {
        G_0_o = grp_fu_87_p2.read();
    } else {
        G_0_o = G_0_i.read();
    }
}

void scal::thread_G_0_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_0))) {
        G_0_o_ap_vld = ap_const_logic_1;
    } else {
        G_0_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_1_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_1))) {
        G_1_o = grp_fu_87_p2.read();
    } else {
        G_1_o = G_1_i.read();
    }
}

void scal::thread_G_1_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_1))) {
        G_1_o_ap_vld = ap_const_logic_1;
    } else {
        G_1_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_2_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_2))) {
        G_2_o = grp_fu_87_p2.read();
    } else {
        G_2_o = G_2_i.read();
    }
}

void scal::thread_G_2_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_2))) {
        G_2_o_ap_vld = ap_const_logic_1;
    } else {
        G_2_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_3_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_3))) {
        G_3_o = grp_fu_87_p2.read();
    } else {
        G_3_o = G_3_i.read();
    }
}

void scal::thread_G_3_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_3))) {
        G_3_o_ap_vld = ap_const_logic_1;
    } else {
        G_3_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_4_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_4))) {
        G_4_o = grp_fu_87_p2.read();
    } else {
        G_4_o = G_4_i.read();
    }
}

void scal::thread_G_4_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_4))) {
        G_4_o_ap_vld = ap_const_logic_1;
    } else {
        G_4_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_5_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_5))) {
        G_5_o = grp_fu_87_p2.read();
    } else {
        G_5_o = G_5_i.read();
    }
}

void scal::thread_G_5_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_5))) {
        G_5_o_ap_vld = ap_const_logic_1;
    } else {
        G_5_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_6_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_6))) {
        G_6_o = grp_fu_87_p2.read();
    } else {
        G_6_o = G_6_i.read();
    }
}

void scal::thread_G_6_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_6))) {
        G_6_o_ap_vld = ap_const_logic_1;
    } else {
        G_6_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_7_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_7))) {
        G_7_o = grp_fu_87_p2.read();
    } else {
        G_7_o = G_7_i.read();
    }
}

void scal::thread_G_7_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_7))) {
        G_7_o_ap_vld = ap_const_logic_1;
    } else {
        G_7_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_G_8_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_0) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_1) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_2) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_3) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_4) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_5) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_6) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_7))) {
        G_8_o = grp_fu_87_p2.read();
    } else {
        G_8_o = G_8_i.read();
    }
}

void scal::thread_G_8_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_0) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_1) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_2) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_3) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_4) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_5) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_6) && 
         !esl_seteq<1,4,4>(add_ln27_reg_252.read(), ap_const_lv4_7))) {
        G_8_o_ap_vld = ap_const_logic_1;
    } else {
        G_8_o_ap_vld = ap_const_logic_0;
    }
}

void scal::thread_add_ln27_fu_110_p2() {
    add_ln27_fu_110_p2 = (!zext_ln27_fu_106_p1.read().is_01() || !trunc_ln27_reg_239.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln27_fu_106_p1.read()) + sc_biguint<4>(trunc_ln27_reg_239.read()));
}

void scal::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void scal::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void scal::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void scal::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void scal::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln25_fu_95_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void scal::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void scal::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln25_fu_95_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void scal::thread_i_fu_100_p2() {
    i_fu_100_p2 = (!i_0_reg_76.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_reg_76.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void scal::thread_icmp_ln25_fu_95_p2() {
    icmp_ln25_fu_95_p2 = (!i_0_reg_76.read().is_01() || !n.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_76.read() == n.read());
}

void scal::thread_trunc_ln27_fu_91_p1() {
    trunc_ln27_fu_91_p1 = x_offset.read().range(4-1, 0);
}

void scal::thread_zext_ln27_fu_106_p1() {
    zext_ln27_fu_106_p1 = esl_zext<4,2>(i_0_reg_76.read());
}

void scal::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln25_fu_95_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

